import 'dart:async';
import 'dart:developer';
import 'package:flutter/material.dart';
import 'package:invento2/database/inventory/category/category_functions.dart';
import 'package:invento2/database/inventory/product/product_functions.dart';
import 'package:invento2/database/inventory/product/product_model.dart';
import 'package:invento2/database/users/user_fuctions.dart';
import 'package:invento2/screens/screen_inventory/widgets/filtered_grid_view.dart';

class SearchAndFilterSection extends StatefulWidget {
  const SearchAndFilterSection({super.key});

  @override
  State<SearchAndFilterSection> createState() => _SearchAndFilterSectionState();
}

class _SearchAndFilterSectionState extends State<SearchAndFilterSection> with TickerProviderStateMixin {
  late TextEditingController searchController;
  late AnimationController filterDrawerAnimationController;
  late Animation<Offset> filterDrawerSlideAnimation;

  late ValueNotifier<List<ProductModel>> filteredProductsNotifier= ValueNotifier<List<ProductModel>>(
    ProductListNotifier.value
        .where((product) => product.userId == userDataNotifier.value.id)
        .toList(),
  );

  List<String> selectedCategories = [];
  List<String> categories = [];
  bool showFilterDrawer = false;
  double minPrice = 0.0;
  double maxPrice = 1000.0;
@override
void initState() {
  super.initState();

  

  // Initialize the search controller
  searchController = TextEditingController();
  searchController.addListener(() => filterProducts(searchController.text));

  // Initialize filtered products notifier with products belonging to the current user
  filteredProductsNotifier = ValueNotifier<List<ProductModel>>(
    ProductListNotifier.value.where((product) => product.userId == userDataNotifier.value.id).toList(),
  );

  // Initialize the filter drawer animation controller
  filterDrawerAnimationController = AnimationController(
    vsync: this,
    duration: const Duration(milliseconds: 300),
  )..addStatusListener((status) {
      if (status == AnimationStatus.dismissed) {
        setState(() => showFilterDrawer = false);
      }
    });

  filterDrawerSlideAnimation = Tween<Offset>(
    begin: const Offset(0.0, -1.0),
    end: Offset.zero,
  ).animate(CurvedAnimation(
    parent: filterDrawerAnimationController,
    curve: Curves.easeInOut,
  ));

  // Initialize categories list
  categories = categoryListNotifier.value
      .where((category) => category.name != null)
      .map((category) => category.name!)
      .toList();
}

  void filterProducts(String query) {
  final filteredList = ProductListNotifier.value.where((product) {
    bool matchesUserId = product.userId == userDataNotifier.value.id;
    bool matchesQuery = query.isEmpty || product.name.toLowerCase().contains(query.toLowerCase());
    bool matchesCategory = selectedCategories.isEmpty || selectedCategories.contains(product.category);
    bool matchesPrice = product.price >= minPrice && product.price <= maxPrice;

    return matchesUserId && matchesQuery && matchesCategory && matchesPrice;
  }).toList();

  filteredProductsNotifier.value = filteredList;
  log("Filtered products: ${filteredProductsNotifier.value.length}");
}




  double getMaxPrice() {
    return ProductListNotifier.value.fold(0.0, (max, product) => product.price > max ? product.price : max);
  }

  void toggleFilterDrawer() {
    setState(() {
      if (showFilterDrawer) {
        filterDrawerAnimationController.reverse();
      } else {
        showFilterDrawer = true;
        filterDrawerAnimationController.forward();
      }
    });
  }

  void _clearFilters() {
    setState(() {
      selectedCategories.clear();
      minPrice = 0.0;
      maxPrice = getMaxPrice();
      searchController.clear();
      filterProducts('');
    });
  }

  void _applyFilters() {
    filterProducts(searchController.text);
    toggleFilterDrawer();
  }

  void _onCategorySelected(String category) {
  setState(() {
    if (selectedCategories.contains(category)) {
      selectedCategories.remove(category);
    } else {
      selectedCategories.add(category);
    }
    // Update the filtered products immediately after category selection
    filterProducts(searchController.text);
  });
}

@override
void dispose() {
  // Dispose of all controllers to avoid memory leaks
  searchController.dispose();
  filterDrawerAnimationController.dispose();
  filteredProductsNotifier.dispose();
  super.dispose();
}

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        Positioned.fill(
          child: Padding(
            padding: const EdgeInsets.only(top: 50),
            child: ProductGridView(filteredProductsNotifier: filteredProductsNotifier),
          ),
        ),
        if (showFilterDrawer)
          Positioned.fill(
            top: 60,
            child: GestureDetector(
              onTap: toggleFilterDrawer,
              child: Container(color: Colors.black.withOpacity(0.5)),
            ),
          ),
        if (showFilterDrawer)
          Positioned(
            top: 0,
            left: 0,
            right: 0,
            child: SlideTransition(
              position: filterDrawerSlideAnimation,
              child: FilterDrawer(
                categories: categories,
                selectedCategories: selectedCategories,
                minPrice: minPrice,
                maxPrice: maxPrice,
                maxProductPrice: getMaxPrice(),
                onPriceChanged: (start, end) {
                  setState(() {
                    minPrice = start;
                    maxPrice = end;
                  });
                },
                onCategorySelected: _onCategorySelected,
                onApplyFilters: _applyFilters,
                onClearFilters: _clearFilters,
                onCloseDrawer: toggleFilterDrawer,
              ),
            ),
          ),
        Positioned(
          top: 0,
          left: 0,
          right: 0,
          child: _buildSearchBar(),
        ),
      ],
    );
  }

  Widget _buildSearchBar() {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 15, vertical: 10),
      color: Colors.white,
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Expanded(
            child: TextField(
              controller: searchController,
              decoration: const InputDecoration(
                hintText: "Search...",
                border: InputBorder.none,
                contentPadding: EdgeInsets.all(10),
              ),
            ),
          ),
          IconButton(
            icon: const Icon(Icons.filter_list_outlined),
            onPressed: toggleFilterDrawer,
          ),
        ],
      ),
    );
  }

  

}


class FilterDrawer extends StatefulWidget {
  final List<String> categories;
  final List<String> selectedCategories;
  final double minPrice;
  final double maxPrice;
  final double maxProductPrice;
  final Function(double, double) onPriceChanged;
  final Function(String) onCategorySelected;
  final VoidCallback onApplyFilters;
  final VoidCallback onClearFilters;
  final VoidCallback onCloseDrawer;

  const FilterDrawer({
    super.key,
    required this.categories,
    required this.selectedCategories,
    required this.minPrice,
    required this.maxPrice,
    required this.maxProductPrice,
    required this.onPriceChanged,
    required this.onCategorySelected,
    required this.onApplyFilters,
    required this.onClearFilters,
    required this.onCloseDrawer,
  });

  @override
  State<FilterDrawer> createState() => _FilterDrawerState();

}


class _FilterDrawerState extends State<FilterDrawer> {
  late double localMinPrice;
  late double localMaxPrice;

  @override
  void initState() {
    super.initState();
    // Initialize local state with values from the parent widget
    localMinPrice = widget.minPrice;
    localMaxPrice = widget.maxPrice;
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedContainer(
      duration: const Duration(milliseconds: 300),
      height: 400,
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 10,
            offset: const Offset(0, 5),
          ),
        ],
        borderRadius: const BorderRadius.vertical(bottom: Radius.circular(15)),
      ),
      child: Column(
        children: [
          const SizedBox(height: 60),
          Padding(
            padding: const EdgeInsets.all(15),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                const Text('Filters', style: TextStyle(fontWeight: FontWeight.bold, fontSize: 18)),
                IconButton(
                  icon: const Icon(Icons.close),
                  onPressed: widget.onCloseDrawer,
                ),
              ],
            ),
          ),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 15.0),
            child: Wrap(
              spacing: 8.0,
              runSpacing: 4.0,
              children: widget.categories.map((category) {
                return FilterChip(
                  label: Text(category),
                  selected: widget.selectedCategories.contains(category),
                  onSelected: (_) => widget.onCategorySelected(category),
                );
              }).toList(),
            ),
          ),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 15.0),
            child: Column(
              children: [
                const Text("Price Range"),
                RangeSlider(
                  values: RangeValues(localMinPrice, localMaxPrice),
                  min: 0.0,
                  max: widget.maxProductPrice,
                  onChanged: (values) {
                    setState(() {
                      localMinPrice = values.start;
                      localMaxPrice = values.end;
                    });
                    widget.onPriceChanged(values.start, values.end);
                  },
                ),
                Text('Selected Price Range: ₹${localMinPrice.toStringAsFixed(2)} - ₹${localMaxPrice.toStringAsFixed(2)}'),
              ],
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(15),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                ElevatedButton(onPressed: widget.onApplyFilters, child: const Text('Apply Filters')),
                ElevatedButton(onPressed: widget.onClearFilters, child: const Text('Clear Filters')),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
